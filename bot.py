from logging import basicConfig
from vk import VK, types
from vk.bot_framework import Dispatcher, NamedRule, BaseMiddleware
from vk.utils import TaskManager
from vk.keyboards import Keyboard, ButtonColor
from lvls import LVL
from random import choice
from json import loads
from os import getenv
from extra import *

basicConfig(level="INFO")

dp = Dispatcher(VK(getenv('TOKEN')), getenv('GROUP_ID'))
task_manager = TaskManager(dp.vk.loop)
lvl_class = LVL(dp.vk)

@dp.middleware()
class Regist(BaseMiddleware):
	async def pre_process_event(self, event, data):
		from_id, peer_id = event['object']['message']['from_id'], event['object']['message']['peer_id']
		if event['type'] == 'message_new' and from_id != peer_id:
			data['lvl'] = lvl_class(peer_id)
			if not data['lvl'].check_user(from_id) and from_id > 0:
				data['lvl'].add_user(from_id)
		data['message'] = event['object']['message']
		return data

	async def post_process_event(self):
		pass

@dp.setup_rule
class Commands(NamedRule):
	key = 'commands'

	def __init__(self, commands):
		self.commands = commands

	async def check(self, message, data):
		msg = message.text.lower().split()
		return msg and msg[0][1:] in self.commands

@dp.setup_rule
class WithPayload(NamedRule):
	key = 'with_payload'

	def __init__(self, payload):
		self.payload = payload

	async def check(self, message, data):
		if self.payload and message.payload : return True
		elif not self.payload and not message.payload : return True
		else: return False

@dp.setup_rule
class PayloadCommands(NamedRule):
	key = 'payload_commands'

	def __init__(self, commands):
		self.commands = commands

	async def check(self, message, data):
		return message.payload and loads(message.payload)['command'] in self.commands

@dp.setup_rule
class IsAdmin(NamedRule):
	key = 'is_admin'

	def __init__(self, admin):
		self.admin = admin
	
	async def check(self, message, data):
		try: chat = (await dp.vk.api_request('messages.getConversationsById', {'peer_ids': message.peer_id}))['items'][0]['chat_settings']
		except: is_admin = False
		else: is_admin = message.from_id == chat['owner_id'] or message.from_id in chat['admin_ids']
		if self.admin and is_admin: return True
		elif not self.admin and not is_admin: return True
		else: return False

@dp.message_handler(commands = ['help'], count_args = 0, in_chat = True)
async def help(message, data):
	await message.answer('''–ö–æ–º–∞–Ω–¥—ã:
1) /MyLVL - –º–æ–π —É—Ä–æ–≤–µ–Ω—å
2) /TopLVL[ <–æ—Ç>:<–¥–æ>] - —Ç–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
3) /LVL & <id>+ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–Ω–∏
4) /Tele <count> & <id> - –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ—é exp –¥—Ä—É–≥–æ–º—É
5) /BAN[ <–ø—Ä–∏—á–∏–Ω–∞>] & <id>+ - —Ç–∏–ø–æ –±–∞–Ω
6) /Ord <chr>+ - –∫–æ–¥ –≤ —é–Ω–∏–∫–æ–¥–µ —Å–∏–º–≤–æ–ª–æ–≤''')

@dp.message_handler(regex = r'^f+$', in_chat = True)
async def f_f(message, data):
	rand = choice((457241326,457241327,457241328,457241331,457241332,457241333,457241334,457241338,457241339))
	await message.answer('–ü–∞–ª –±–æ–µ—Ü\n–°–º–µ—Ä—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö', attachment = f'photo-{dp.group_id}_{rand}')

@dp.message_handler(regex = r'^[^\?]*\?{3}$', in_chat = True)
async def hm_(message, data):
	await message.answer('', attachment = f'photo-{dp.group_id}_457241329')

@dp.message_handler(regex = r'^[^\?]*\?{2}$', in_chat = True)
async def h_(message, data):
	await message.answer('', attachment = f'photo-{dp.group_id}_457241330')

@dp.message_handler(commands = ['toplvl'], count_args = 0, in_chat = True)
@dp.message_handler(commands = ['toplvl'], have_args = [lambda arg: arg.isdigit(), lambda arg: arg.isdigit()], in_chat = True)
async def toplvl_send(message, data):
	reg_default = ('1', '10')
	reg = (int(data.get('args', reg_default)[0]), int(data.get('args', reg_default)[1]))
	await dp.vk.api_request('messages.send', {'random_id' : 0, 'peer_id' : message.peer_id, 'message' : await data['lvl'].toplvl_size(*reg), 'disable_mentions' : True})

@dp.message_handler(commands = ['mylvl'], count_args = 0, in_chat = True)
async def mylvl(message, data):
	id = message.from_id
	await data['lvl'].send(id)
	await message.answer(data['lvl'][id])

@dp.message_handler(commands = ['lvl'], count_args = 0, with_reply_message = True, in_chat = True)
async def lvl(message, data):
	if message.reply_message.from_id > 0:
		id = message.reply_message.from_id
		await data['lvl'].send(id)
		await message.answer(data['lvl'][id])

ban_key = Keyboard(one_time = None, inline = True)
ban_key.add_text_button('–Ø—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ', ButtonColor.POSITIVE, {'command' : 'ban'})
ban_key = ban_key.get_keyboard()
@dp.message_handler(commands = ['ban'], with_reply_message = True, in_chat = True)
async def ban(message, data):
	if message.reply_message.from_id > 0:
		texts = message.text.split(maxsplit = 1)
		id = message.reply_message.from_id
		await data['lvl'].user(id)
		await message.answer(f"–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{data['lvl'][id]}\n–ü—Ä–∏—á–∏–Ω–∞: {texts[1] if len(texts) == 2 else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}", keyboard = ban_key)

@dp.message_handler(commands = ['echo'], count_args = 0, is_admin = True, in_chat = True)
async def echo(message, data):
	try: member_ids = [item['member_id'] for item in (await dp.vk.api_request('messages.getConversationMembers', {'peer_id' : message.peer_id}))['items'] if item['member_id'] > 0 and item['member_id'] != message.from_id]	
	except: pass
	else:
		id = message.from_id
		await data['lvl'].user(id)
		await message.answer(f"*{data['lvl'][id]} –∑–∞–æ—Ä–∞–ª –Ω–∞ –≤—Å—é –±–µ—Å–µ–¥—É*\n–£—Å–ª—ã—à–∞–ª–∏ —ç—Ç–æ:\n" + ''.join(f'[id{id}|üí¨]' for id in member_ids))

@dp.message_handler(commands = ['setsmile'], have_args = [lambda arg: len(arg) <= 4], is_admin = True, with_reply_message = True, in_chat = True)
async def set_smile(message, data):
	if message.reply_message.from_id > 0:
		data['lvl'].setsmile(message.reply_message.from_id, smile = data['args'][0])
		await message.answer(f"{data['args'][0]} : —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.message_handler(commands = ['delsmile'], count_args = 0, is_admin = True, with_reply_message = True, in_chat = True)
async def del_smile(message, data):
	if message.reply_message.from_id > 0:
		data['lvl'].setsmile(message.reply_message.from_id)
		await message.answer('–°–º–∞–π–ª —É–¥–∞–ª—ë–Ω')

@dp.message_handler(commands = ['exp'], have_args = [isint], is_admin = True, with_reply_message = True, in_chat = True)
@dp.message_handler(commands = ['exp'], have_args = [isint, isint], is_admin = True, with_reply_message = True, in_chat = True)
async def exp(message, data):
	if message.reply_message.from_id > 0:
		id = message.reply_message.from_id
		if len(data['args']) == 2:
			lvl, exp = int(data['args'][0]), int(data['args'][1])
			blank = f"{lvl:+}‚ìÅ|{exp:+}‚í∫:\n"
			data['lvl'].insert_lvl(id, lvl = lvl, exp = exp)
		else:
			exp = int(data['args'][0])
			blank = f"{exp:+}‚í∫:\n"
			data['lvl'].insert_lvl(id, exp = exp)
		await data['lvl'].send(id)
		await message.answer(blank + data['lvl'][id])

@dp.message_handler(commands = ['exp'], have_args = [lambda arg: arg in '+-'], is_admin = True, with_reply_message = True, in_chat = True)
async def expp(message, data):
	if message.reply_message.from_id > 0:
		id = message.reply_message.from_id
		exp =  int(f"{data['args'][0]}{atta(message.reply_message.text, message.reply_message.attachments)}")
		data['lvl'].insert_lvl(id, exp = exp)
		await data['lvl'].send(id)
		await message.answer(f"{exp:+}‚í∫:\n{data['lvl'][id]}")

@dp.message_handler(commands = ['tele'], have_args = [ispos], with_reply_message = True, in_chat = True)
async def tele(message, data):
	if message.reply_message.from_id > 0:
		exp = int(data['args'][0])
		id1, id2 = message.from_id, message.reply_message.from_id
		if data['lvl'].remove_exp(id1, exp = exp):
			data['lvl'].insert_lvl(id2, exp = exp)
			await data['lvl'].send(id1, id2)
			blank = f"{exp:+}‚í∫:\n{data['lvl'][id2]}\n{-exp:+}‚í∫:\n{data['lvl'][id1]}"
		else:
			await data['lvl'].send(id1)
			blank = f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚í∫!\n{data['lvl'][id1]}"
		await message.answer(blank)

@dp.message_handler(commands = ['ord'], count_args = 0, with_reply_message = True, in_chat = True)
async def ordo(message, data):
	ord_list = [ord(text) for text in message.reply_message.text]
	await message.answer(f'–ù–µ –∑–Ω–∞—é –∑–∞—á–µ–º —Ç–µ–±–µ, –Ω–æ –ø–æ–ª—É—á–∞–π: {ord_list}')

@dp.message_handler(commands = ['info'], count_args = 0, with_reply_message = True, in_chat = True)
async def info(message, data):
	exp = atta(message.reply_message.text, message.reply_message.attachments, data['message']['reply_message']['attachments'])
	await message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è {exp:+}‚í∫')

@dp.message_handler(commands = ['hello'], count_args = 0, is_admin = True, in_chat = True)
async def hello_help(message, data):
	await message.answer('''–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
{title} - –∑–∞–≥–æ–ª–æ–≤–æ–∫
{user} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
{name} - –∏–º—è –±–æ—Ç–∞
''')

@dp.message_handler(commands = ['sethello'], in_chat = True, is_admin = True)
async def hello_plus(message, data):
	text = message.text.split(maxsplit = 1)[1]
	try: hello = text.format(title = 'title', user = 'user', name = 'name')
	except Exception as e: await message.answer(f'–û—à–∏–±–∫–∞ "{e}"')
	else:
		data['lvl'].add_text(text)
		await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ\n' + hello)

@dp.message_handler(commands = ['delhello'], count_args = 0, is_admin = True, in_chat = True)
async def hello_del(message, data):
	data['lvl'].del_text()
	await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–æ')

@dp.message_handler(chat_action = types.message.Action.chat_invite_user)
async def add_user(message, data):
	id1, id2 = message.from_id, message.action.member_id
	text = data['lvl'].hello_text()
	if id1 > 0 and id2 > 0 and text:
		await data['lvl'].user(id1,id2)
		if id1 != id2:
			title = f"* Welcome to the club, buddy. *\n–í–∞—Å –ø—Ä–∏–∑–≤–∞–ª(–∞): {data['lvl'][id1]}"
			bot_name = (await dp.vk.api_request('groups.getById', {'group_id' : dp.group_id}))[0]['name']
			blank = text.format(title = title, user = data['lvl'][id2], name = bot_name)
			photo = 457241337
		else:
			blank = f"–í–µ—Ä–Ω—É–ª—Å—è(–∞—Å—å) {data['lvl'][id1]}."
			photo = 457241328
		await message.answer(blank, attachment = f'photo-{dp.group_id}_{photo}')

@dp.message_handler(chat_action = types.message.Action.chat_kick_user, is_admin = False)
async def remove_user(message, data):
	id2 = message.action.member_id
	if id2 > 0 and data['lvl'].hello_text():
		await data['lvl'].user(id2)
		await message.answer(f"{data['lvl'][id2]} —Å—Ç–∞–ª(–∞) –Ω–∞—Ç—É—Ä–∞–ª–æ–º(.", attachment = f'photo-{dp.group_id}_457241328')

@dp.message_handler(chat_action = types.message.Action.chat_kick_user, is_admin = True)
async def remove_user_admin(message, data):
	id2 = message.action.member_id
	if id2 > 0 and data['lvl'].hello_text():
		await data['lvl'].user(id2)
		await message.answer(f"{data['lvl'][id2]} –∑–∞–µ–±–∞–ª(–∞) –∞–¥–º–∏–Ω–∞.", attachment = f'photo-{dp.group_id}_457241336')

@dp.message_handler(chat_action = types.message.Action.chat_invite_user_by_link)
async def add_user_link(message, data):
	id1 = message.from_id
	text = data['lvl'].hello_text()
	if id1 > 0 and text:
		await data['lvl'].user(id1)
		title = f"* Welcome to the club, buddy. *\n* –í—ã –ø–æ–ø–∞–ª–∏ –≤ –ª–æ–≤—É—à–∫—É *"
		bot_name = (await dp.vk.api_request('groups.getById', {'group_id': dp.group_id}))[0]['name']
		blank = text.format(title = title, user = data['lvl'][id1], name = bot_name)
		await message.answer(blank, attachment = f'photo-{dp.group_id}_457241337')

@dp.message_handler(with_payload = False, in_chat = True)
async def pass_lvl(message, data):
	if message.from_id > 0:
		exp = atta(message.text, message.attachments, data['message']['attachments'])
		data['lvl'].insert_lvl(message.from_id, exp = exp)
	if search(r'—Å–º–µ—Ä—Ç|—Å—É–∏—Ü–∏–¥|—É–º–µ—Ä–µ—Ç—å|–≥–∏–±–Ω—É|–æ–∫–Ω–æ',message.text, I): await message.answer(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏:\n"{message.text}".\n–Ø —Ä–∞—Å—Ü–µ–Ω–∏–ª–∞ —ç—Ç–æ –∑–∞ –ø–æ–ø—ã—Ç–∫—É —Å—É–∏—Ü–∏–¥–∞.\n[id532695720|#–±–ª—è_–û–ª—è_–∂–∏–≤–∏!!!!!]')
	if search(r'\b(?:–º–∏—Ä–∞—Ä—É–∫—É—Ä–∏–Ω|–º–∏—Ä–∞|—Ä–∞—Ä—É|—Ä—É–∫—É|–∫—É—Ä–∏|—Ä–∏–Ω)\b', message.text, I):
		await dp.vk.api_request('messages.send', {'random_id' : 0, 'peer_id' : message.peer_id, 'sticker_id' : 9805})
		await message.answer(f'[id121852428|üí¨][id{message.from_id}|üÉè]–û–∂–∏–¥–∞–π—Ç–µ –±–∞–Ω–∞‚Ä¶')

@task_manager.add_task
async def run():
	dp.run_polling()

if __name__ == "__main__":
	task_manager.run(auto_reload = True)