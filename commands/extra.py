from utils import Data as data
from vkbottle.tools import Keyboard, Text, KeyboardButtonColor
from vkbottle.bot import BotLabeler
from random import randint, choice
from re import search

help = [
	'/BAN[ <–ø—Ä–∏—á–∏–Ω–∞>] & <rep_mes> - —Ç–∏–ø–æ –±–∞–Ω',
	'/Ord <chr>+ - –∫–æ–¥ –≤ —é–Ω–∏–∫–æ–¥–µ —Å–∏–º–≤–æ–ª–æ–≤',
	'/TWDNE - –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –≤–∞–π—Ñ—É —Å —Å–∞–π—Ç–∞ ThisWaifuDoesNotExist',
	'/SS Animes|Mangas|Ranobe|Characters|People[ <—Å—Ç—Ä>] <–ù–∞–∑–≤–∞–Ω–∏–µ/–ò–º—è>',
	'/TTS <text> - –æ–∑–≤—É—á–∏—Ç <text>'
]

bl = BotLabeler()

@bl.chat_message(command = ['ban <text>', 'ban'], with_reply_message = True)
async def ban(message, text = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'):
	await data.lvl.user(id := message.reply_message.from_id)
	await message.answer(f"–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{data.lvl[id]}\n–ü—Ä–∏—á–∏–Ω–∞: {text}", keyboard = Keyboard(inline = True)
		.add(Text(label = '–Ø—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ', payload = {'command': 'ban'}), color = KeyboardButtonColor.POSITIVE)
		.get_json())

@bl.chat_message(command = ['echo <text>', 'echo'], is_admin = True)
async def echo(message, text = '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'):
	await message.answer(f'{text}\n' + ''.join(f"[id{item.member_id}|üí¨]"
		for item in (await data.bot.api.messages.get_conversation_members(peer_id = message.peer_id)).items
		if item.member_id > 0 and item.member_id != message.from_id))

@bl.chat_message(command = 'ord', with_reply_message = True)
async def ordo(message):
	await message.answer(f'–ù–µ –∑–Ω–∞—é –∑–∞—á–µ–º —Ç–µ–±–µ, –Ω–æ –ø–æ–ª—É—á–∞–π: {[ord(text) for text in message.reply_message.text]}')

@bl.chat_message(command = 'twdne')
async def twdne(message):
	compliment = choice(('—Å–∏–º–ø–∞—Ç–∏—á–Ω–∞—è', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è', '–≤–∏—Ä—Ç—É–æ–∑–Ω–∞—è', '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è', '–º–∏–ª–∞—è', '–±–µ—Å—Ü–µ–Ω–Ω–∞—è'))
	await message.answer(message = f'–≠—Ç–∞ –≤–∞–π—Ñ—É —Ç–∞–∫–∞—è {compliment}', attachment = await data.twdne.get_doc(randint(1, 99999)))

@bl.chat_message(command = 'date', with_reply_message = True)
async def date_created(message):
	date = search(r'<ya:created dc:date="(?P<Y>\d{4})-(?P<M>\d{2})-(?P<D>\d{2}).+?"/>', await data.foaf(id := message.reply_message.from_id))
	await data.lvl.user(id)
	await message.answer(message = f"–Ø –ø—Ä–æ—Å–ª–µ–¥–∏–ª–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {data.lvl[id]},\n–æ–Ω —Å–æ–∑–¥–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É: {date['D']}-{date['M']}-{date['Y']}")

@bl.chat_message(command = 'tts <text>')
async def tts(message, text):
	await message.answer(attachment = await data.amessage.get_doc(text))

@bl.chat_message(command = ['ss <type:inc[animes,mangas,ranobe,characters,people]> <page:pos> <text>',
		'ss <type:inc[animes,mangas,ranobe,characters,people]> <text>'])
async def shiki_search(message, type, text, page = 1):
	response = await data.shiki.search(type, text, page)
	if response:
		objs = [[f"{num + 1}) {item['russian'] or item['name']}",
				'–®–∏–∫–∏: ' + await data.shiki.get_shiki_short_link(item['url']),
				'–ù–µ–∫–æ: ' + await data.shiki.get_neko_short_link(item['id']) if type == 'animes' else None]
			for num, item in enumerate(response)]
		text = '\n'.join('\n'.join(i for i in item if i) for item in objs)
		docs = await data.shiki.get_doc(item['image']['original'] for item in response)
		await message.answer(text, attachment = ','.join(docs))
	else: await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ')